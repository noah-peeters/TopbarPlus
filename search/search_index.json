{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TopbarPlus is a module enabling the construction of dynamic topbar icons. These icons can be enhanced with features and methods, like themes, dropdowns and menus, to expand upon their appearance and behaviour. TopbarPlus fully supports PC, Mobile, Tablet and Console, and comes with internal features such as 'overflows' to ensure icons remain within suitable bounds. Creating an icon is as simple as: -- Within a LocalScript in StarterPlayerScripts and assuming TopbarPlus is placed in ReplicatedStorage local Icon = require ( game : GetService ( \"ReplicatedStorage\" ). Icon ) local icon = Icon . new () Info The order icons appear are determined by their construction sequence. Icons constructed first will have a smaller order number, therefore will appear left of icons with a higher order. For instance, if you construct a shop icon then an inventory icon, the shop icon will appear furthest left. You can modify this behaviour using icon:setOrder . This constructs an empty 32x32 icon on the topbar. To add an image and label, do: icon : setImage ( imageId ) icon : setLabel ( \"Label\" ) These methods are 'chainable' therefore can alternatively be called by doing: local icon = Icon . new () : setImage ( imageId ) : setLabel ( \"Label\" ) Info Chainable methods have a chainable tag next to their name within the API Icon docs. Sometimes you'll want an item to appear only when deselected , and similarily only when selected . You can achieve this by specifying \"deselected\" or \"selected\" within the toggleState parameter of methods containing the toggleable tag. Leaving this parameter blank or as nil will default to applying to both states. For example: local icon = Icon . new () : setImage ( closedImageId , \"deselected\" ) : setImage ( openedImageId , \"selected\" ) : setLabel ( \"Closed\" , \"deselected\" ) : setLabel ( \"Open\" , \"selected\" ) You may wish to enhance icons further with features like themes, dropdowns and menus, or by binding GuiObjects and KeyCodes to their toggle. This and much more can be achieved by exploring the Feature Guide and Icon API .","title":"Introduction"},{"location":"changelog/","text":"[2.3.2] - April 24 2021 \u00b6 Fixed \u00b6 A bug where the topbar was not always updated when an icon was constructed [2.3.1] - March 16 2021 \u00b6 Added \u00b6 icon.lockedSettings - this is used internally to prevent overflow properties being accidentally overwritten Fixed \u00b6 A critical bug with overflows that caused icons to disappear [2.3.0] - February 14 2021 \u00b6 Added \u00b6 icon:setProperty(propertName, value) - this will enable properties to be set within chained methods [2.2.1] - February 13 2021 \u00b6 Fixed \u00b6 An overlapping icon bug caused by yielding after requiring the Icon module [2.2.0] - February 12 2021 \u00b6 Added \u00b6 IconController.clearIconOnSpawn(icon) Improved \u00b6 The cleanup process when icon:destroy() is called [2.1.0] - February 2 2021 \u00b6 Added \u00b6 icon:bindEvent(iconEventName, eventFunction) icon:unbindEvent(iconEventName) [2.0.0] - January 19 2021 \u00b6 Added \u00b6 Menus (dropdowns but horizontal and with scrolling support!) Dropdowns v2 Labels v2 Tips v2 Captions v2 Corners v2 Chainable methods Automatic overflows when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon The ability to set changes for specific toggle states (instead of automatically both), e.g. icon:setLabel(\"Off\", \"deselected\") and icon:setLabel(\"On\", \"selected\") Rich Text support Icon.mimic(coreIconToMimic) constructor to replace functions like IconController.createFakeChat icon:Destroy() uppercase alias to assist developers who utilise PascalCase tools such as Maids Referencing support for third parties, see Third Parties icon:set(settingName, value) icon:get(settingName, value) icon:clearNotices() icon:setMenu(arrayOfIcons) icon:bindToggleItem(guiObjectOrLayerCollector) icon:unbindToggleItem(guiObjectOrLayerCollector) icon:bindToggleKey(keyCodeEnum) icon:unbindToggleKey(keyCodeEnum) icon:lock() icon:unlock() icon:setTopPadding(offset, scale) icon:setCornerRadius(scale, offset, toggleState) icon:setImageYScale(yScale, toggleState) icon:setImageRatio(ratio, toggleState) icon:setSize(XOffset, YOffset, toggleState) icon:join(parentIcon, featureName) icon:leave() icon.notified event icon.hoverStarted event icon.hoverEnded event icon.dropdownOpened event icon.dropdownClosed event icon.menuOpened event icon.menuClosed event IconController.setGap(offset, specificAlignment) Many new properties Improved \u00b6 The internals and externals of themes to make then significantly easier to customise and apply Console support Mobile support (particularly for features like tips and captions) The behaviour of features like tips and captions Notices (now fully compatible with menus, dropdowns, etc) Changed \u00b6 Icon.new(name, imageId, order, label) to Icon.new() - this is to encourage users to utilise the equivalent methods instead which provide greater flexibility Frustrating require() dependencies to static modules Icon to be the parent module with others as descendants All IconController functions now use . instead of the incorrect : Icon orders to be determined now by their construction sequence (instead of randomly), with the option to modify this with icon:setOrder icon:setLabel(text) to icon:setLabel(text, toggleState) icon:setImage(imageId) to icon:setImage(imageId, toggleState) icon:setOrder(orderNumber) to icon:setOrder(orderNumber, toggleState) icon:setLeft() to icon:setLeft(toggleState) icon:setMid() to icon:setMid(toggleState) icon:setRight() to icon:setRight(toggleState) icon:setBaseZIndex(zindex) to icon:setBaseZIndex(zindex, toggleState) icon.objects to icon.instances The names of almost all instances to be more obvious and accurate Removed \u00b6 FakeChat support - internal changes to the Roblox Core API now make it impossible to accurately mimic their core chat icon icon:setToggleFunction (use selected/deselected events instead) icon:setHoverFunction (use hoverStarted/Ended events instead) icon:createDropdown (replaced with icon:setDropdown ) icon:removeDropdown icon:setImageSize (replaced with icon:setImageRatio and icon:setImageYScale ) icon:setCellSize (replaced with icon:setSize ) icon:setToggleMenu (replaced with icon:bindToggleItem ) icon:clearNotifications (replaced with icon:clearNotices ) icon:applyThemeToObject icon:applyThemeToAllObjects icon.endNotifications event IconController:getAllIcons (replaced with IconController.getIcons ) Some properties may have been removed too Fixed \u00b6 Console-mode rapid enabling and disabling bug Recursive update topbar bug","title":"Changelog"},{"location":"changelog/#232-april-24-2021","text":"","title":"[2.3.2] - April 24 2021"},{"location":"changelog/#fixed","text":"A bug where the topbar was not always updated when an icon was constructed","title":"Fixed"},{"location":"changelog/#231-march-16-2021","text":"","title":"[2.3.1] - March 16 2021"},{"location":"changelog/#added","text":"icon.lockedSettings - this is used internally to prevent overflow properties being accidentally overwritten","title":"Added"},{"location":"changelog/#fixed_1","text":"A critical bug with overflows that caused icons to disappear","title":"Fixed"},{"location":"changelog/#230-february-14-2021","text":"","title":"[2.3.0] - February 14 2021"},{"location":"changelog/#added_1","text":"icon:setProperty(propertName, value) - this will enable properties to be set within chained methods","title":"Added"},{"location":"changelog/#221-february-13-2021","text":"","title":"[2.2.1] - February 13 2021"},{"location":"changelog/#fixed_2","text":"An overlapping icon bug caused by yielding after requiring the Icon module","title":"Fixed"},{"location":"changelog/#220-february-12-2021","text":"","title":"[2.2.0] - February 12 2021"},{"location":"changelog/#added_2","text":"IconController.clearIconOnSpawn(icon)","title":"Added"},{"location":"changelog/#improved","text":"The cleanup process when icon:destroy() is called","title":"Improved"},{"location":"changelog/#210-february-2-2021","text":"","title":"[2.1.0] - February 2 2021"},{"location":"changelog/#added_3","text":"icon:bindEvent(iconEventName, eventFunction) icon:unbindEvent(iconEventName)","title":"Added"},{"location":"changelog/#200-january-19-2021","text":"","title":"[2.0.0] - January 19 2021"},{"location":"changelog/#added_4","text":"Menus (dropdowns but horizontal and with scrolling support!) Dropdowns v2 Labels v2 Tips v2 Captions v2 Corners v2 Chainable methods Automatic overflows when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon The ability to set changes for specific toggle states (instead of automatically both), e.g. icon:setLabel(\"Off\", \"deselected\") and icon:setLabel(\"On\", \"selected\") Rich Text support Icon.mimic(coreIconToMimic) constructor to replace functions like IconController.createFakeChat icon:Destroy() uppercase alias to assist developers who utilise PascalCase tools such as Maids Referencing support for third parties, see Third Parties icon:set(settingName, value) icon:get(settingName, value) icon:clearNotices() icon:setMenu(arrayOfIcons) icon:bindToggleItem(guiObjectOrLayerCollector) icon:unbindToggleItem(guiObjectOrLayerCollector) icon:bindToggleKey(keyCodeEnum) icon:unbindToggleKey(keyCodeEnum) icon:lock() icon:unlock() icon:setTopPadding(offset, scale) icon:setCornerRadius(scale, offset, toggleState) icon:setImageYScale(yScale, toggleState) icon:setImageRatio(ratio, toggleState) icon:setSize(XOffset, YOffset, toggleState) icon:join(parentIcon, featureName) icon:leave() icon.notified event icon.hoverStarted event icon.hoverEnded event icon.dropdownOpened event icon.dropdownClosed event icon.menuOpened event icon.menuClosed event IconController.setGap(offset, specificAlignment) Many new properties","title":"Added"},{"location":"changelog/#improved_1","text":"The internals and externals of themes to make then significantly easier to customise and apply Console support Mobile support (particularly for features like tips and captions) The behaviour of features like tips and captions Notices (now fully compatible with menus, dropdowns, etc)","title":"Improved"},{"location":"changelog/#changed","text":"Icon.new(name, imageId, order, label) to Icon.new() - this is to encourage users to utilise the equivalent methods instead which provide greater flexibility Frustrating require() dependencies to static modules Icon to be the parent module with others as descendants All IconController functions now use . instead of the incorrect : Icon orders to be determined now by their construction sequence (instead of randomly), with the option to modify this with icon:setOrder icon:setLabel(text) to icon:setLabel(text, toggleState) icon:setImage(imageId) to icon:setImage(imageId, toggleState) icon:setOrder(orderNumber) to icon:setOrder(orderNumber, toggleState) icon:setLeft() to icon:setLeft(toggleState) icon:setMid() to icon:setMid(toggleState) icon:setRight() to icon:setRight(toggleState) icon:setBaseZIndex(zindex) to icon:setBaseZIndex(zindex, toggleState) icon.objects to icon.instances The names of almost all instances to be more obvious and accurate","title":"Changed"},{"location":"changelog/#removed","text":"FakeChat support - internal changes to the Roblox Core API now make it impossible to accurately mimic their core chat icon icon:setToggleFunction (use selected/deselected events instead) icon:setHoverFunction (use hoverStarted/Ended events instead) icon:createDropdown (replaced with icon:setDropdown ) icon:removeDropdown icon:setImageSize (replaced with icon:setImageRatio and icon:setImageYScale ) icon:setCellSize (replaced with icon:setSize ) icon:setToggleMenu (replaced with icon:bindToggleItem ) icon:clearNotifications (replaced with icon:clearNotices ) icon:applyThemeToObject icon:applyThemeToAllObjects icon.endNotifications event IconController:getAllIcons (replaced with IconController.getIcons ) Some properties may have been removed too","title":"Removed"},{"location":"changelog/#fixed_3","text":"Console-mode rapid enabling and disabling bug Recursive update topbar bug","title":"Fixed"},{"location":"contributing/","text":"Bug Reports \u00b6 To submit a bug report, open an issue with label Type: Bug or create a response at the discussion thread . Ensure your report includes a detailed explanation of the problem with any relavent images, videos, etc (such as console errors). Make sure to include a link to a stipped-down uncopylocked Roblox place which reproduces the bug. Questions and Feedback \u00b6 Be sure to check out the documentation and resources first before asking a question. We recommend submitting all questions and feedback to the discussion thread . You can also open an issue with label Type: Question . Submitting a resource (video tutorial, port, etc) \u00b6 Fancy making a tutorial or resource for TopbarPlus? Feel free to get in touch and we can provide tips, best practices, etc. We'll feature approved resources on the resources page and often the discussion thread . To submit a resource, open an issue , or reach out on the discussion thread or to ForeverHD on the devforum . Suggestions and Code \u00b6 TopbarPlus is completely free and open source; any suggestions and code contributions are greatly appreciated! To make a suggestion, open an issue with label Type: Enhancement or create a response at the discussion thread . Please open a suggestion before beginning a code contribution to ensure it's discussed through fully (we wouldn't want to waste your time!). Some tools you'll find useful when working on this project: Rojo Material for MKDocs Roblox LSP Documentation \u00b6 If you find any problems in the documentation, including typos, bad grammar, misleading phrasing, or missing content, feel free to file issues and pull requests to fix them. API documentation should be written at the top of the corresponding module under --[[ module:header . These comment blocks are automatically converted into markdown files and deployed to the site when pulled into the main branch. To test documentation: Install Material for MKDocs . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Change directory to this clone cd TopbarPlus . Swap to the development branch git checkout development . Call mkdocs serve within your terminal. Open your local website (it will look something like http://0.0.0.0:8000 ) Any changes to mkdocs.yml or the files within docs will now update live to this local site. Important All pull requests must be made to the development branch.","title":"Contributing"},{"location":"contributing/#bug-reports","text":"To submit a bug report, open an issue with label Type: Bug or create a response at the discussion thread . Ensure your report includes a detailed explanation of the problem with any relavent images, videos, etc (such as console errors). Make sure to include a link to a stipped-down uncopylocked Roblox place which reproduces the bug.","title":"Bug Reports"},{"location":"contributing/#questions-and-feedback","text":"Be sure to check out the documentation and resources first before asking a question. We recommend submitting all questions and feedback to the discussion thread . You can also open an issue with label Type: Question .","title":"Questions and Feedback"},{"location":"contributing/#submitting-a-resource-video-tutorial-port-etc","text":"Fancy making a tutorial or resource for TopbarPlus? Feel free to get in touch and we can provide tips, best practices, etc. We'll feature approved resources on the resources page and often the discussion thread . To submit a resource, open an issue , or reach out on the discussion thread or to ForeverHD on the devforum .","title":"Submitting a resource (video tutorial, port, etc)"},{"location":"contributing/#suggestions-and-code","text":"TopbarPlus is completely free and open source; any suggestions and code contributions are greatly appreciated! To make a suggestion, open an issue with label Type: Enhancement or create a response at the discussion thread . Please open a suggestion before beginning a code contribution to ensure it's discussed through fully (we wouldn't want to waste your time!). Some tools you'll find useful when working on this project: Rojo Material for MKDocs Roblox LSP","title":"Suggestions and Code"},{"location":"contributing/#documentation","text":"If you find any problems in the documentation, including typos, bad grammar, misleading phrasing, or missing content, feel free to file issues and pull requests to fix them. API documentation should be written at the top of the corresponding module under --[[ module:header . These comment blocks are automatically converted into markdown files and deployed to the site when pulled into the main branch. To test documentation: Install Material for MKDocs . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Change directory to this clone cd TopbarPlus . Swap to the development branch git checkout development . Call mkdocs serve within your terminal. Open your local website (it will look something like http://0.0.0.0:8000 ) Any changes to mkdocs.yml or the files within docs will now update live to this local site. Important All pull requests must be made to the development branch.","title":"Documentation"},{"location":"features/","text":"Images \u00b6 icon : setImage ( shopImageId ) Labels \u00b6 icon : setLabel ( \"Shop\" ) icon : setImage ( shopImageId ) icon : setLabel ( \"Shop\" ) Notices \u00b6 icon : notify () Themes \u00b6 Themes are configurable tables of information that can be applied to icons to enhance their appearance and behaviour. When constructed, an icon will automatically apply the 'Default' theme. To expand upon this, you can create your own theme modules under Icon -> Themes ) then apply these to your desired icons. The Default theme and all theme settings can be found here . Themes can be applied in two ways: To all icons and future icons at once: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) IconController . setGameTheme ( Themes . YourThemeName ) Individually to an icon: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) icon : setTheme ( Themes . YourThemeName ) In this example, we'll apply the BlueGradient theme which automatically comes with TopbarPlus: local iconModule = game : GetService ( \"ReplicatedStorage\" ). Icon local IconController = require ( iconModule . IconController ) local Themes = require ( iconModule . Themes ) IconController . setGameTheme ( Themes [ \"BlueGradient\" ]) Deselected Selected Dropdowns \u00b6 Dropdowns are vertical navigation frames that contain an array of icons: icon : set ( \"dropdownSquareCorners\" , true ) icon : setDropdown ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , }) Menus \u00b6 Menus are horizontal navigation frames that contain an array of icons: icon : set ( \"menuMaxIconsBeforeScroll\" , 2 ) icon : setMenu ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , }) Captions \u00b6 icon : setCaption ( \"Shop Caption\" ) Tips \u00b6 icon : setTip ( \"Open Shop (v)\" ) Toggle Items \u00b6 Binds a GuiObject (such as a frame) to appear or disappear when the icon is toggled icon : bindToggleItem ( shopFrame ) It is equivalent to doing: icon . deselected : Connect ( function () shopFrame . Visible = false end ) icon . selected : Connect ( function () shopFrame . Visible = true end ) Toggle Keys \u00b6 Binds a keycode which toggles the icon when pressed. -- When the 'v' key is pressed, the shop icon will open -- When pressed again it will close icon : bindToggleKey ( Enum . KeyCode . V ) Corners \u00b6 icon : setCornerRadius ( 0 , 0 ) icon : setCornerRadius ( 0 , 8 ) icon : setCornerRadius ( 1 , 0 ) Alignments \u00b6 -- Aligns the icon to the left of the screen (next to chat if present) -- This is the default behaviour icon : setLeft () -- Aligns the icon in the middle of the screen icon : setMid () -- Aligns the icon to the right of the screen (next to (...) if present) icon : setRight () Console Support \u00b6 Overflows \u00b6 When accounting for many device types and screen sizes, icons may occassionally, particularly for smaller devices like phones, overlap with other icons or the bounds of the screen. TopbarPlus solves this problem with automatic overflows which prevent overlaps occuring. An overflow will appear when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon These examples and more can be tested, viewed and edited at the Playground .","title":"Features"},{"location":"features/#images","text":"icon : setImage ( shopImageId )","title":"Images"},{"location":"features/#labels","text":"icon : setLabel ( \"Shop\" ) icon : setImage ( shopImageId ) icon : setLabel ( \"Shop\" )","title":"Labels"},{"location":"features/#notices","text":"icon : notify ()","title":"Notices"},{"location":"features/#themes","text":"Themes are configurable tables of information that can be applied to icons to enhance their appearance and behaviour. When constructed, an icon will automatically apply the 'Default' theme. To expand upon this, you can create your own theme modules under Icon -> Themes ) then apply these to your desired icons. The Default theme and all theme settings can be found here . Themes can be applied in two ways: To all icons and future icons at once: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) IconController . setGameTheme ( Themes . YourThemeName ) Individually to an icon: local Themes = require ( game : GetService ( \"ReplicatedStorage\" ). Icon . Themes ) icon : setTheme ( Themes . YourThemeName ) In this example, we'll apply the BlueGradient theme which automatically comes with TopbarPlus: local iconModule = game : GetService ( \"ReplicatedStorage\" ). Icon local IconController = require ( iconModule . IconController ) local Themes = require ( iconModule . Themes ) IconController . setGameTheme ( Themes [ \"BlueGradient\" ]) Deselected Selected","title":"Themes"},{"location":"features/#dropdowns","text":"Dropdowns are vertical navigation frames that contain an array of icons: icon : set ( \"dropdownSquareCorners\" , true ) icon : setDropdown ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , })","title":"Dropdowns"},{"location":"features/#menus","text":"Menus are horizontal navigation frames that contain an array of icons: icon : set ( \"menuMaxIconsBeforeScroll\" , 2 ) icon : setMenu ({ Icon . new () : setLabel ( \"Category 1\" ) , Icon . new () : setLabel ( \"Category 2\" ) , Icon . new () : setLabel ( \"Category 3\" ) , Icon . new () : setLabel ( \"Category 4\" ) : setName ( \"CategoryFourIcon\" ) : bindEvent ( \"selected\" , function ( self ) print (( \"%s was selected!\" ): format ( self . name )) end ) : bindEvent ( \"deselected\" , function ( self ) print (( \"%s was deselected!\" ): format ( self . name )) end ) , })","title":"Menus"},{"location":"features/#captions","text":"icon : setCaption ( \"Shop Caption\" )","title":"Captions"},{"location":"features/#tips","text":"icon : setTip ( \"Open Shop (v)\" )","title":"Tips"},{"location":"features/#toggle-items","text":"Binds a GuiObject (such as a frame) to appear or disappear when the icon is toggled icon : bindToggleItem ( shopFrame ) It is equivalent to doing: icon . deselected : Connect ( function () shopFrame . Visible = false end ) icon . selected : Connect ( function () shopFrame . Visible = true end )","title":"Toggle Items"},{"location":"features/#toggle-keys","text":"Binds a keycode which toggles the icon when pressed. -- When the 'v' key is pressed, the shop icon will open -- When pressed again it will close icon : bindToggleKey ( Enum . KeyCode . V )","title":"Toggle Keys"},{"location":"features/#corners","text":"icon : setCornerRadius ( 0 , 0 ) icon : setCornerRadius ( 0 , 8 ) icon : setCornerRadius ( 1 , 0 )","title":"Corners"},{"location":"features/#alignments","text":"-- Aligns the icon to the left of the screen (next to chat if present) -- This is the default behaviour icon : setLeft () -- Aligns the icon in the middle of the screen icon : setMid () -- Aligns the icon to the right of the screen (next to (...) if present) icon : setRight ()","title":"Alignments"},{"location":"features/#console-support","text":"","title":"Console Support"},{"location":"features/#overflows","text":"When accounting for many device types and screen sizes, icons may occassionally, particularly for smaller devices like phones, overlap with other icons or the bounds of the screen. TopbarPlus solves this problem with automatic overflows which prevent overlaps occuring. An overflow will appear when left-set or right-set icons exceed the boundary of the: Viewport Closest enabled opposite-aligned icon Closest enabled center-aligned icon These examples and more can be tested, viewed and edited at the Playground .","title":"Overflows"},{"location":"installation/","text":"Method 1 - Take the model \u00b6 Take the TopbarPlus model by Nanoblox. Open the toolbox and navigate to Inventory -> My Models. Click TopbarPlus to insert into your game and place anywhere within ReplicatedStorage . Method 2 - Download from Releases \u00b6 Visit the latest release . Under Assets , download TopbarPlus.rbxm . Within studio, navigate to MODEL -> Model and insert the file anywhere within ReplicatedStorage . Method 3 - With Rojo \u00b6 Setup with Rojo . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Modify the default.project.json file to your desired location (by default TopbarPlus is built directly into ReplicatedStorage ). Call rojo serve (terminal or VSC plugin) and connect to the rojo studio plugin.","title":"Installation"},{"location":"installation/#method-1-take-the-model","text":"Take the TopbarPlus model by Nanoblox. Open the toolbox and navigate to Inventory -> My Models. Click TopbarPlus to insert into your game and place anywhere within ReplicatedStorage .","title":"Method 1 - Take the model"},{"location":"installation/#method-2-download-from-releases","text":"Visit the latest release . Under Assets , download TopbarPlus.rbxm . Within studio, navigate to MODEL -> Model and insert the file anywhere within ReplicatedStorage .","title":"Method 2 - Download from Releases"},{"location":"installation/#method-3-with-rojo","text":"Setup with Rojo . Visit the TopbarPlus repository . Click Fork in the top right corner. Clone this fork into your local repository. Modify the default.project.json file to your desired location (by default TopbarPlus is built directly into ReplicatedStorage ). Call rojo serve (terminal or VSC plugin) and connect to the rojo studio plugin.","title":"Method 3 - With Rojo"},{"location":"resources/","text":"Theme Settings Model Playground Discussion Repository Roblox-TS Port by grilme99 If you would like to submit a resource (such as a video tutorial, port, etc), please see contributing .","title":"Resources"},{"location":"third_parties/","text":"It's important only a single TopbarPlus applications initiates at runtime otherwise issues such as overlapping icons will occur. A developer may rename and/or place their Icon module anywhere within ReplicatedStorage therefore it's important for third party runtime applications (such as admin commands) to check and reference this correctly. To achieve this: When initiated, an ObjectValue called TopbarPlusReference is added directly under ReplicatedStorage . Check for this. If present, require its value otherwise initiate your own TopbarPlus. local runService = game : GetService ( \"RunService\" ) local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) -- This checks for the reference module under ReplicatedStorage local topbarPlusReference = replicatedStorage : FindFirstChild ( \"TopbarPlusReference\" ) local iconModule = pathway . to . your . topbarplus if topbarPlusReference then iconModule = topbarPlusReference . Value end -- Now use TopbarPlus as normal local Icon = require ( iconModule ) local icon = Icon . new ()","title":"Third Parties"},{"location":"api/icon/","text":"Construtors \u00b6 new \u00b6 local icon = Icon . new () Constructs an empty 32x32 icon on the topbar. mimic \u00b6 {unstable} local icon = Icon . mimic ( coreIconName ) Constructs an icon to replace its CoreGui equivalent and accurately mimic its behaviour. This allows for the persistence of core gui items (such as the chatbar, leaderboard, emotes, etc) while having full control over the appearance and behaviour of the icon to toggle it. Mimicable Items: \"PlayerList\" , \"Backpack\" , \"Chat\" , \"EmotesMenu\" Danger Due to recent unannounced changes Roblox have completely restricted the ability to accurately mimic core items such as Chat. Until this is resolved the mimic constructor will not work as intended. Methods \u00b6 set \u00b6 {chainable} icon : set ( settingName , value , toggleState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will apply to both states. For most scenarious, it's recommended instead to apply settings using themes . get \u00b6 local value = icon : get ( settingName , toggleState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will default to retrieving the deselected value. getToggleState \u00b6 local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\". setTheme \u00b6 {chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information. setEnabled \u00b6 {chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden. setName \u00b6 {chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) . setProperty \u00b6 {chainable} icon : setProperty ( propertyName , value ) An alternative way of doing zone[propertyName] = value . This enables the easy-configuration of icon properties within chained methods. select \u00b6 {chainable} icon : select () Selects the icon (as if it were clicked once). deselect \u00b6 {chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again). notify \u00b6 {chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected. clearNotices \u00b6 {chainable} icon : clearNotices () disableStateOverlay \u00b6 {chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released. setImage \u00b6 {chainable} {toggleable} icon : setImage ( imageId , toggleState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string. setLabel \u00b6 {chainable} {toggleable} icon : setLabel ( text , toggleState ) setOrder \u00b6 {chainable} {toggleable} icon : setOrder ( order , toggleState ) setCornerRadius \u00b6 {chainable} {toggleable} icon : setCornerRadius ( scale , offset , toggleState ) setLeft \u00b6 {chainable} {toggleable} icon : setLeft ( toggleState ) setMid \u00b6 {chainable} {toggleable} icon : setMid ( toggleState ) setRight \u00b6 {chainable} {toggleable} icon : setRight ( toggleState ) setImageYScale \u00b6 {chainable} {toggleable} icon : setImageYScale ( YScale , toggleState ) Defines the proportional space the icons image takes up within the icons container. setImageRatio \u00b6 {chainable} {toggleable} icon : setImageRatio ( ratio , toggleState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 . setLabelYScale \u00b6 {chainable} {toggleable} icon : setLabelYScale ( YScale , toggleState ) Defines how large label text appears.By default YScale is 0.45 . setBaseZIndex \u00b6 {chainable} {toggleable} icon : setBaseZIndex ( ZIndex , toggleState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference. setSize \u00b6 {chainable} {toggleable} icon : setSize ( XOffset , YOffset , toggleState ) Determines the icons container size. By default XOffset and YOffset are 32 . bindToggleItem \u00b6 {chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled. unbindToggleItem \u00b6 {chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle. bindEvent \u00b6 {chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered. unbindEvent \u00b6 {chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName . bindToggleKey \u00b6 {chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed. unbindToggleKey \u00b6 {chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode. lock \u00b6 {chainable} icon : lock () Prevents the icon from being pressed and toggled. unlock \u00b6 {chainable} icon : unlock () Enables the icon to be pressed and toggled. setTopPadding \u00b6 {chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon. setTip \u00b6 {chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text . setCaption \u00b6 {chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text . join \u00b6 {chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\". leave \u00b6 {chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu. setDropdown \u00b6 {chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method . setMenu \u00b6 {chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method . destroy \u00b6 {chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon. Events \u00b6 selected \u00b6 icon . selected : Connect ( function () print ( \"The icon was selected\" ) end ) deselected \u00b6 icon . deselected : Connect ( function () print ( \"The icon was deselected\" ) end ) toggled \u00b6 icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s\" ): format ( icon : getToggleState ( isSelected ))) end ) hoverStarted \u00b6 icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end ) hoverEnded \u00b6 icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end ) dropdownOpened \u00b6 icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end ) dropdownClosed \u00b6 icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end ) menuOpened \u00b6 icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end ) menuClosed \u00b6 icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end ) notified \u00b6 icon . notified : Connect ( function () print ( \"New notice\" ) end ) Properties \u00b6 deselectWhenOtherIconSelected \u00b6 local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true . accountForWhenDisabled \u00b6 local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled name \u00b6 {read-only} local string = icon . name --[default: '\"Unnamed Icon\"'] isSelected \u00b6 {read-only} local bool = icon . isSelected enabled \u00b6 {read-only} local bool = icon . enabled hovering \u00b6 {read-only} local bool = icon . hovering tipText \u00b6 {read-only} local stringOrNil = icon . tipText captionText \u00b6 {read-only} local stringOrNil = icon . captionText totalNotices \u00b6 {read-only} local int = icon . totalNotices dropdownIcons \u00b6 {read-only} local arrayOfIcons = icon . dropdownIcons menuIcons \u00b6 {read-only} local arrayOfIcons = icon . menuIcons dropdownOpen \u00b6 {read-only} local bool = icon . dropdownOpen menuOpen \u00b6 {read-only} local bool = icon . menuOpen locked \u00b6 {read-only} local bool = icon . locked topPadding \u00b6 {read-only} local udim = icon . topPadding targetPosition \u00b6 {read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"Icon"},{"location":"api/icon/#construtors","text":"","title":"Construtors"},{"location":"api/icon/#new","text":"local icon = Icon . new () Constructs an empty 32x32 icon on the topbar.","title":"new"},{"location":"api/icon/#mimic","text":"{unstable} local icon = Icon . mimic ( coreIconName ) Constructs an icon to replace its CoreGui equivalent and accurately mimic its behaviour. This allows for the persistence of core gui items (such as the chatbar, leaderboard, emotes, etc) while having full control over the appearance and behaviour of the icon to toggle it. Mimicable Items: \"PlayerList\" , \"Backpack\" , \"Chat\" , \"EmotesMenu\" Danger Due to recent unannounced changes Roblox have completely restricted the ability to accurately mimic core items such as Chat. Until this is resolved the mimic constructor will not work as intended.","title":"mimic"},{"location":"api/icon/#methods","text":"","title":"Methods"},{"location":"api/icon/#set","text":"{chainable} icon : set ( settingName , value , toggleState ) Applies a specific setting to an icon. All settings can be found here . If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will apply to both states. For most scenarious, it's recommended instead to apply settings using themes .","title":"set"},{"location":"api/icon/#get","text":"local value = icon : get ( settingName , toggleState ) Retrieves the given settings value. If the setting falls under the 'toggleable' category then \"deselected\" or \"selected\" can be specified, otherwise if left empty or nil will default to retrieving the deselected value.","title":"get"},{"location":"api/icon/#gettogglestate","text":"local selectedOrDeselectedString = icon : getToggleState () Returns the current toggleState, either \"deselected\" or \"selected\".","title":"getToggleState"},{"location":"api/icon/#settheme","text":"{chainable} icon : setTheme ( theme ) Applies a theme to the given icon. See themes for more information.","title":"setTheme"},{"location":"api/icon/#setenabled","text":"{chainable} icon : setEnabled ( bool ) When set to false , the icon will be disabled and hidden.","title":"setEnabled"},{"location":"api/icon/#setname","text":"{chainable} icon : setName ( string ) Associates the given name to the icon which enables it to be retrieved with IconController.getIcon(name) .","title":"setName"},{"location":"api/icon/#setproperty","text":"{chainable} icon : setProperty ( propertyName , value ) An alternative way of doing zone[propertyName] = value . This enables the easy-configuration of icon properties within chained methods.","title":"setProperty"},{"location":"api/icon/#select","text":"{chainable} icon : select () Selects the icon (as if it were clicked once).","title":"select"},{"location":"api/icon/#deselect","text":"{chainable} icon : deselect () Deselects the icon (as if it were clicked, then clicked again).","title":"deselect"},{"location":"api/icon/#notify","text":"{chainable} icon : notify ( clearNoticeEvent ) Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected.","title":"notify"},{"location":"api/icon/#clearnotices","text":"{chainable} icon : clearNotices ()","title":"clearNotices"},{"location":"api/icon/#disablestateoverlay","text":"{chainable} icon : disableStateOverlay ( bool ) When set to true , disables the shade effect which appears when the icon is pressed and released.","title":"disableStateOverlay"},{"location":"api/icon/#setimage","text":"{chainable} {toggleable} icon : setImage ( imageId , toggleState ) Applies an image to the icon based on the given imaageId . imageId can be an assetId or a complete asset string.","title":"setImage"},{"location":"api/icon/#setlabel","text":"{chainable} {toggleable} icon : setLabel ( text , toggleState )","title":"setLabel"},{"location":"api/icon/#setorder","text":"{chainable} {toggleable} icon : setOrder ( order , toggleState )","title":"setOrder"},{"location":"api/icon/#setcornerradius","text":"{chainable} {toggleable} icon : setCornerRadius ( scale , offset , toggleState )","title":"setCornerRadius"},{"location":"api/icon/#setleft","text":"{chainable} {toggleable} icon : setLeft ( toggleState )","title":"setLeft"},{"location":"api/icon/#setmid","text":"{chainable} {toggleable} icon : setMid ( toggleState )","title":"setMid"},{"location":"api/icon/#setright","text":"{chainable} {toggleable} icon : setRight ( toggleState )","title":"setRight"},{"location":"api/icon/#setimageyscale","text":"{chainable} {toggleable} icon : setImageYScale ( YScale , toggleState ) Defines the proportional space the icons image takes up within the icons container.","title":"setImageYScale"},{"location":"api/icon/#setimageratio","text":"{chainable} {toggleable} icon : setImageRatio ( ratio , toggleState ) Defines the x:y ratio dimensions as a number. By default ratio is 1.00 .","title":"setImageRatio"},{"location":"api/icon/#setlabelyscale","text":"{chainable} {toggleable} icon : setLabelYScale ( YScale , toggleState ) Defines how large label text appears.By default YScale is 0.45 .","title":"setLabelYScale"},{"location":"api/icon/#setbasezindex","text":"{chainable} {toggleable} icon : setBaseZIndex ( ZIndex , toggleState ) Calculates the difference between the existing baseZIndex (i.e. instances.iconContainer.ZIndex ) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference.","title":"setBaseZIndex"},{"location":"api/icon/#setsize","text":"{chainable} {toggleable} icon : setSize ( XOffset , YOffset , toggleState ) Determines the icons container size. By default XOffset and YOffset are 32 .","title":"setSize"},{"location":"api/icon/#bindtoggleitem","text":"{chainable} icon : bindToggleItem ( guiObjectOrLayerCollector ) Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled.","title":"bindToggleItem"},{"location":"api/icon/#unbindtoggleitem","text":"{chainable} icon : unbindToggleItem ( guiObjectOrLayerCollector ) Unbinds the given GuiObject or LayerCollector from the toggle.","title":"unbindToggleItem"},{"location":"api/icon/#bindevent","text":"{chainable} icon : bindEvent ( iconEventName , eventFunction ) Connects to an icon event based upon the given iconEventName and call eventFunction with arguments (self, ...) when the event is triggered.","title":"bindEvent"},{"location":"api/icon/#unbindevent","text":"{chainable} icon : unbindEvent ( iconEventName ) Unbinds the connection of the associated iconEventName .","title":"unbindEvent"},{"location":"api/icon/#bindtogglekey","text":"{chainable} icon : bindToggleKey ( keyCodeEnum ) Binds a keycode which toggles the icon when pressed.","title":"bindToggleKey"},{"location":"api/icon/#unbindtogglekey","text":"{chainable} icon : unbindToggleKey ( keyCodeEnum ) Unbinds the given keycode.","title":"unbindToggleKey"},{"location":"api/icon/#lock","text":"{chainable} icon : lock () Prevents the icon from being pressed and toggled.","title":"lock"},{"location":"api/icon/#unlock","text":"{chainable} icon : unlock () Enables the icon to be pressed and toggled.","title":"unlock"},{"location":"api/icon/#settoppadding","text":"{chainable} icon : setTopPadding ( offset , scale ) The gap between the top of the screen and the icon.","title":"setTopPadding"},{"location":"api/icon/#settip","text":"{chainable} icon : setTip ( text ) Sets a tip. To remove, pass nil as text .","title":"setTip"},{"location":"api/icon/#setcaption","text":"{chainable} icon : setCaption ( text ) Sets a caption. To remove, pass nil as text .","title":"setCaption"},{"location":"api/icon/#join","text":"{chainable} icon : join ( parentIcon , featureName ) Parents the icon to the given parentIcon under the specified feature, either \"dropdown\" or \"menu\".","title":"join"},{"location":"api/icon/#leave","text":"{chainable} icon : leave () Unparents an icon from a parentIcon if it belongs to a dropdown or menu.","title":"leave"},{"location":"api/icon/#setdropdown","text":"{chainable} icon : setDropdown ( arrayOfIcons ) Creates a vertical dropdown based upon the given table array of icons . Pass an empty table {} to remove the dropdown. Dropdown settings can be configured using themes or the set method .","title":"setDropdown"},{"location":"api/icon/#setmenu","text":"{chainable} icon : setMenu ( arrayOfIcons ) Creates a horizontal menu based upon the given table array of icons . Pass an empty table {} to remove the menu. Menu settings can be configured using themes or the set method .","title":"setMenu"},{"location":"api/icon/#destroy","text":"{chainable} icon : destroy () Clears all connections and destroys all instances associated with the icon.","title":"destroy"},{"location":"api/icon/#events","text":"","title":"Events"},{"location":"api/icon/#selected","text":"icon . selected : Connect ( function () print ( \"The icon was selected\" ) end )","title":"selected"},{"location":"api/icon/#deselected","text":"icon . deselected : Connect ( function () print ( \"The icon was deselected\" ) end )","title":"deselected"},{"location":"api/icon/#toggled","text":"icon . toggled : Connect ( function ( isSelected ) print (( \"The icon was %s\" ): format ( icon : getToggleState ( isSelected ))) end )","title":"toggled"},{"location":"api/icon/#hoverstarted","text":"icon . hoverStarted : Connect ( function () print ( \"A mouse, finger or controller selection is hovering over the icon\" ) end )","title":"hoverStarted"},{"location":"api/icon/#hoverended","text":"icon . hoverEnded : Connect ( function () print ( \"The item is no longer hovering over the icon\" ) end )","title":"hoverEnded"},{"location":"api/icon/#dropdownopened","text":"icon . dropdownOpened : Connect ( function () print ( \"The dropdown was opened\" ) end )","title":"dropdownOpened"},{"location":"api/icon/#dropdownclosed","text":"icon . dropdownClosed : Connect ( function () print ( \"The dropdown was closed\" ) end )","title":"dropdownClosed"},{"location":"api/icon/#menuopened","text":"icon . menuOpened : Connect ( function () print ( \"The menu was opened\" ) end )","title":"menuOpened"},{"location":"api/icon/#menuclosed","text":"icon . menuClosed : Connect ( function () print ( \"The menu was closed\" ) end )","title":"menuClosed"},{"location":"api/icon/#notified","text":"icon . notified : Connect ( function () print ( \"New notice\" ) end )","title":"notified"},{"location":"api/icon/#properties","text":"","title":"Properties"},{"location":"api/icon/#deselectwhenothericonselected","text":"local bool = icon . deselectWhenOtherIconSelected --[default: 'true'] A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true .","title":"deselectWhenOtherIconSelected"},{"location":"api/icon/#accountforwhendisabled","text":"local bool = icon . accountForWhenDisabled --[default: 'false'] A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled","title":"accountForWhenDisabled"},{"location":"api/icon/#name","text":"{read-only} local string = icon . name --[default: '\"Unnamed Icon\"']","title":"name"},{"location":"api/icon/#isselected","text":"{read-only} local bool = icon . isSelected","title":"isSelected"},{"location":"api/icon/#enabled","text":"{read-only} local bool = icon . enabled","title":"enabled"},{"location":"api/icon/#hovering","text":"{read-only} local bool = icon . hovering","title":"hovering"},{"location":"api/icon/#tiptext","text":"{read-only} local stringOrNil = icon . tipText","title":"tipText"},{"location":"api/icon/#captiontext","text":"{read-only} local stringOrNil = icon . captionText","title":"captionText"},{"location":"api/icon/#totalnotices","text":"{read-only} local int = icon . totalNotices","title":"totalNotices"},{"location":"api/icon/#dropdownicons","text":"{read-only} local arrayOfIcons = icon . dropdownIcons","title":"dropdownIcons"},{"location":"api/icon/#menuicons","text":"{read-only} local arrayOfIcons = icon . menuIcons","title":"menuIcons"},{"location":"api/icon/#dropdownopen","text":"{read-only} local bool = icon . dropdownOpen","title":"dropdownOpen"},{"location":"api/icon/#menuopen","text":"{read-only} local bool = icon . menuOpen","title":"menuOpen"},{"location":"api/icon/#locked","text":"{read-only} local bool = icon . locked","title":"locked"},{"location":"api/icon/#toppadding","text":"{read-only} local udim = icon . topPadding","title":"topPadding"},{"location":"api/icon/#targetposition","text":"{read-only} local udim2 = icon . targetPosition The position the icon is at or aims to move to.","title":"targetPosition"},{"location":"api/icon_controller/","text":"Functions \u00b6 setGameTheme \u00b6 IconController . setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons. setDisplayOrder \u00b6 IconController . setDisplayOrder ( number ) Changes the DisplayOrder of the TopbarPlus ScreenGui to the given value. setTopbarEnabled \u00b6 IconController . setTopbarEnabled ( bool ) When set to false , hides all icons created with TopbarPlus. This can also be achieved by calling starterGui:SetCore(\"TopbarEnabled\", false) . setGap \u00b6 IconController . setGap ( integer , alignment ) Defines the offset width (i.e. gap) between each icon for the given alignment, left , mid , right , or all alignments if not specified. updateTopbar \u00b6 IconController . updateTopbar () Determines how icons should be positioned on the topbar and moves them accordingly. clearIconOnSpawn \u00b6 IconController . clearIconOnSpawn ( icon ) Calls destroy on the given icon when the player respawns. This is useful for scenarious where you wish to cleanup icons that are constructed within a Gui with ResetOnSpawn set to true . For example: -- Place at the bottom of your icon creator localscript local icons = IconController . getIcons () for _ , icon in pairs ( icons ) do IconController . clearIconOnSpawn ( icon ) end getIcons \u00b6 local arrayOfIcons = IconController . getIcons () Returns all icons as an array. getIcon \u00b6 local icon = IconController . getIcon ( name ) Returns the icon with the given name (or false if not found). If multiple icons have the same name, then one will be returned randomly. Properties \u00b6 topbarEnabled \u00b6 {read-only} local bool = IconController . topbarEnabled controllerModeEnabled \u00b6 {read-only} local bool = IconController . controllerModeEnabled leftGap \u00b6 {read-only} local gapNumber = IconController . leftGap --[default: '12'] midGap \u00b6 {read-only} local gapNumber = IconController . midGap --[default: '12'] rightGap \u00b6 {read-only} local gapNumber = IconController . rightGap --[default: '12']","title":"IconController"},{"location":"api/icon_controller/#functions","text":"","title":"Functions"},{"location":"api/icon_controller/#setgametheme","text":"IconController . setGameTheme ( theme ) Sets the default theme which is applied to all existing and future icons.","title":"setGameTheme"},{"location":"api/icon_controller/#setdisplayorder","text":"IconController . setDisplayOrder ( number ) Changes the DisplayOrder of the TopbarPlus ScreenGui to the given value.","title":"setDisplayOrder"},{"location":"api/icon_controller/#settopbarenabled","text":"IconController . setTopbarEnabled ( bool ) When set to false , hides all icons created with TopbarPlus. This can also be achieved by calling starterGui:SetCore(\"TopbarEnabled\", false) .","title":"setTopbarEnabled"},{"location":"api/icon_controller/#setgap","text":"IconController . setGap ( integer , alignment ) Defines the offset width (i.e. gap) between each icon for the given alignment, left , mid , right , or all alignments if not specified.","title":"setGap"},{"location":"api/icon_controller/#updatetopbar","text":"IconController . updateTopbar () Determines how icons should be positioned on the topbar and moves them accordingly.","title":"updateTopbar"},{"location":"api/icon_controller/#clearicononspawn","text":"IconController . clearIconOnSpawn ( icon ) Calls destroy on the given icon when the player respawns. This is useful for scenarious where you wish to cleanup icons that are constructed within a Gui with ResetOnSpawn set to true . For example: -- Place at the bottom of your icon creator localscript local icons = IconController . getIcons () for _ , icon in pairs ( icons ) do IconController . clearIconOnSpawn ( icon ) end","title":"clearIconOnSpawn"},{"location":"api/icon_controller/#geticons","text":"local arrayOfIcons = IconController . getIcons () Returns all icons as an array.","title":"getIcons"},{"location":"api/icon_controller/#geticon","text":"local icon = IconController . getIcon ( name ) Returns the icon with the given name (or false if not found). If multiple icons have the same name, then one will be returned randomly.","title":"getIcon"},{"location":"api/icon_controller/#properties","text":"","title":"Properties"},{"location":"api/icon_controller/#topbarenabled","text":"{read-only} local bool = IconController . topbarEnabled","title":"topbarEnabled"},{"location":"api/icon_controller/#controllermodeenabled","text":"{read-only} local bool = IconController . controllerModeEnabled","title":"controllerModeEnabled"},{"location":"api/icon_controller/#leftgap","text":"{read-only} local gapNumber = IconController . leftGap --[default: '12']","title":"leftGap"},{"location":"api/icon_controller/#midgap","text":"{read-only} local gapNumber = IconController . midGap --[default: '12']","title":"midGap"},{"location":"api/icon_controller/#rightgap","text":"{read-only} local gapNumber = IconController . rightGap --[default: '12']","title":"rightGap"}]}